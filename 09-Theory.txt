1. 1
2. 2
3. 3
4. 다형성
5. (1) Base, Derived
(2) Derived::f() called
(3) Base::f() called
(4) Base::f() called
(5) Base::f() called

6. (1) 1, 2, 3
(2) C::f() called
(3) c::f() called
(4) c::f() called
(5) c::f() called

/7. 가까운 / 범위 규칙 / 범위 지정 연산자

8. (1) ::f() (2) A::f() (3) f()

9. 2

10. (1) id=10 / Student 객체가 사라지지 않게되어 메모리 누수의 위험이 있다.
	(2) 소멸자에 virtual 키워드를 붙여주면 된다.
11. 3
12. 3
13. 2
14. (1) 1, 3
(2)
class Shape {
public:
	void paint() { draw(); }
	virtual void draw() = 0;
};
class Circle : public Shape {
	int radius;
public:
	Circle(int raidus = 1) { this-> radius = radius; }
	double getArea() { return 3.14 * radius * radius; }
	void draw() { cout << "반지름=" << radius << "인 원" << endl; }
};
15. 4